{
  "feat-git-worktrees": {
    "tasks": [
      {
        "id": 1,
        "title": "Research Git Worktree Implementation Requirements",
        "description": "Research Git worktree API and best practices for integration. Analyze Git 2.5+ worktree command structure, understand limitations (one branch per worktree, submodule handling), benchmark worktree operations performance, and document findings for implementation reference.",
        "status": "pending",
        "priority": "high",
        "dependencies": [],
        "subtasks": [],
        "tags": [
          "research",
          "git",
          "worktree"
        ],
        "details": "Use git worktree documentation and test various scenarios. Focus on: 1) Git worktree add/remove/list/prune commands, 2) Branch restrictions and edge cases, 3) Disk space implications, 4) Path length limitations on different OS, 5) Submodule behavior in worktrees. Document all findings in research notes.",
        "acceptanceCriteria": [
          "Complete documentation of Git worktree command syntax and options",
          "Performance benchmarks for worktree operations",
          "List of known limitations and edge cases",
          "Recommendations for error handling patterns"
        ],
        "testStrategy": "Create test repository with various configurations, measure operation times, test edge cases like long paths and special characters"
      },
      {
        "id": 2,
        "title": "Create Worktree Manager Module Core",
        "description": "Implement the core Worktree Manager module at scripts/modules/utils/worktree-manager.js with basic create/remove functionality using Task Master's existing error patterns.",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1
        ],
        "subtasks": [],
        "tags": [
          "implementation",
          "worktree",
          "core"
        ],
        "details": "Create worktree-manager.js with functions: createWorktree(taskId, branch), removeWorktree(worktreeId), using standard throw new Error() pattern. Implement path generation as ./worktrees/task-{id}/. Use Task Master's logger utilities for info/warning messages. No custom error classes.",
        "acceptanceCriteria": [
          "Module exports createWorktree and removeWorktree functions",
          "Uses Task Master's existing error handling patterns",
          "Creates worktrees in ./worktrees/task-{id}/ structure",
          "Proper cleanup on removal",
          "Integration with existing logger utilities"
        ],
        "testStrategy": "Unit tests for path generation, integration tests for actual worktree operations, error case testing"
      },
      {
        "id": 3,
        "title": "Implement Worktree Registry Management",
        "description": "Create registry system to track active worktrees in .taskmaster/worktree-registry.json following Task Master's JSON storage patterns.",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          2
        ],
        "subtasks": [],
        "tags": [
          "implementation",
          "registry",
          "data"
        ],
        "details": "Implement registry functions: addToRegistry(entry), removeFromRegistry(worktreeId), getRegistry(), findByTaskId(taskId). Store in .taskmaster/worktree-registry.json with structure: {worktreeId, taskId, branch, path, createdAt}. Use atomic file operations to prevent corruption.",
        "acceptanceCriteria": [
          "Registry stored in .taskmaster/worktree-registry.json",
          "CRUD operations for registry entries",
          "Atomic file operations to prevent corruption",
          "Follows Task Master's JSON patterns",
          "Registry initialization on first use"
        ],
        "testStrategy": "Test concurrent registry access, corruption recovery, invalid data handling"
      },
      {
        "id": 4,
        "title": "Enhance Git Utils for Worktree Detection",
        "description": "Extend scripts/modules/utils/git-utils.js with worktree-aware operations and detection capabilities.",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          1
        ],
        "subtasks": [],
        "tags": [
          "implementation",
          "git",
          "utils"
        ],
        "details": "Add functions: isWorktree(), getWorktreeInfo(), getMainWorktree(), validateGitVersion(). Detect if current directory is a worktree using git rev-parse. Check Git version >= 2.5. Return clear status objects for all operations.",
        "acceptanceCriteria": [
          "Accurate worktree detection",
          "Git version validation with clear error",
          "Worktree info extraction (branch, path)",
          "Main worktree identification",
          "Integration with existing git-utils functions"
        ],
        "testStrategy": "Test in worktree and non-worktree contexts, various Git versions, edge cases"
      },
      {
        "id": 5,
        "title": "Implement Configuration and Feature Gating",
        "description": "Add worktree feature configuration to Task Master's config system with binary enable/disable and multi-layer enforcement to prevent unauthorized enablement.",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "subtasks": [],
        "tags": [
          "implementation",
          "config",
          "security"
        ],
        "details": "Add features.worktrees boolean to config.json with default false. Implement config locking with _locked array. Add runtime enforcement in every worktree function checking config before execution. Use descriptive error messages that explicitly state feature is intentionally disabled.",
        "acceptanceCriteria": [
          "Config schema includes features.worktrees",
          "Config locking mechanism implemented",
          "Runtime checks in all worktree functions",
          "Clear WORKTREES_DISABLED error messages",
          "Cannot be bypassed without code modification"
        ],
        "testStrategy": "Test enforcement at all layers, attempt bypass scenarios, verify error messages"
      },
      {
        "id": 6,
        "title": "Create CLI Commands for Worktree Operations",
        "description": "Implement CLI commands for worktree management: create, list, remove, status, and sync operations.",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          2,
          3,
          4,
          5
        ],
        "subtasks": [],
        "tags": [
          "implementation",
          "cli",
          "commands"
        ],
        "details": "Add commands to scripts/dev.js: worktree create --task <id>, worktree list, worktree remove, worktree status, worktree sync. Commands should check feature flag, provide clear output, handle errors gracefully. Update .gitignore if needed.",
        "acceptanceCriteria": [
          "All five CLI commands implemented",
          "Feature flag validation on each command",
          "Clear status output and error messages",
          "Auto-update .gitignore for worktrees/",
          "Help text for each command"
        ],
        "testStrategy": "CLI integration tests, error scenario testing, output format validation"
      },
      {
        "id": 7,
        "title": "Implement MCP Tool Extensions",
        "description": "Create MCP server tools for worktree operations matching the CLI functionality.",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          2,
          3,
          4,
          5
        ],
        "subtasks": [],
        "tags": [
          "implementation",
          "mcp",
          "tools"
        ],
        "details": "Add tools to mcp-server/src/tools/: create_worktree, remove_worktree, list_worktrees, sync_worktree. Tools should only register when feature is enabled. Use existing MCP patterns and error handling. Return structured responses.",
        "acceptanceCriteria": [
          "Four MCP tools implemented",
          "Dynamic registration based on config",
          "Structured response format",
          "Integration with worktree-manager",
          "Proper error propagation"
        ],
        "testStrategy": "MCP tool testing framework, response validation, error handling tests"
      },
      {
        "id": 8,
        "title": "Add Event System Integration",
        "description": "Integrate worktree operations with Task Master's existing event system for future automation capabilities.",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          6,
          7
        ],
        "subtasks": [],
        "tags": [
          "implementation",
          "events",
          "integration"
        ],
        "details": "Emit standard Task Master events: worktree.created, worktree.removed, worktree.synced. Use existing event emitter patterns. Include relevant data (taskId, worktreeId, branch). No new event system infrastructure needed.",
        "acceptanceCriteria": [
          "Events emitted for create/remove/sync",
          "Event data includes necessary context",
          "Uses existing event patterns",
          "No performance impact",
          "Events can be consumed by listeners"
        ],
        "testStrategy": "Event listener tests, data validation, performance benchmarks"
      },
      {
        "id": 9,
        "title": "Create Comprehensive Test Suite",
        "description": "Develop unit and integration tests for all worktree functionality ensuring reliability and edge case handling.",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          6,
          7,
          8
        ],
        "subtasks": [],
        "tags": [
          "testing",
          "quality",
          "validation"
        ],
        "details": "Create tests in tests/unit/worktree/ and tests/integration/worktree/. Test happy paths, error scenarios, edge cases (long paths, special chars), concurrent operations, registry corruption recovery. Mock Git commands for unit tests.",
        "acceptanceCriteria": [
          "Unit tests for all module functions",
          "Integration tests for CLI commands",
          "MCP tool tests",
          "Edge case coverage",
          "80%+ code coverage"
        ],
        "testStrategy": "Jest test framework, Git command mocking, fixture-based testing"
      },
      {
        "id": 10,
        "title": "Documentation and Usage Examples",
        "description": "Create user documentation for worktree feature including setup guide, command reference, and troubleshooting.",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          9
        ],
        "subtasks": [],
        "tags": [
          "documentation",
          "user-guide",
          "examples"
        ],
        "details": "Document in README.md worktree section: feature overview, requirements (Git 2.5+), setup steps, all CLI/MCP commands with examples, common workflows, troubleshooting guide, disk space considerations. Include code examples for AI agents.",
        "acceptanceCriteria": [
          "Complete command reference",
          "Setup and configuration guide",
          "Common workflow examples",
          "Troubleshooting section",
          "AI agent integration examples"
        ],
        "testStrategy": "Documentation review, example validation, user feedback incorporation"
      }
    ],
    "metadata": {
      "created": "2025-06-17T21:13:25.947Z",
      "updated": "2025-06-17T21:13:25.947Z",
      "description": "Tasks for feat-git-worktrees context"
    }
  }
}