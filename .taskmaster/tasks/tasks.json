{
  "feat-langfuse-integration": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Langfuse Environment and Dependencies",
        "description": "Initialize the project environment with Langfuse SDK integration and configure environment variables for observability tracking",
        "details": "Install Langfuse JavaScript SDK v3.27.0 or later using npm. Create environment configuration module to handle LANGFUSE_SECRET_KEY, LANGFUSE_PUBLIC_KEY, and optional LANGFUSE_HOST variables. Implement validation for required environment variables with graceful fallback when not configured. Update .env.example with Langfuse configuration template. Ensure the SDK is added as an optional dependency to maintain zero-config requirement for end users.",
        "testStrategy": "Write unit tests to verify environment variable loading, validate graceful degradation when Langfuse credentials are missing, and ensure no runtime errors occur when Langfuse is not configured. Test both cloud and self-hosted Langfuse configurations.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Fix Langfuse Import Statement",
            "description": "Fix incorrect import in src/observability/langfuse-tracer.js from '@langfuse/langfuse-js' to 'langfuse' to match the installed Node.js SDK package",
            "details": "The current code imports from '@langfuse/langfuse-js' which is the browser SDK, but we have 'langfuse' (Node.js SDK) installed. Change line 483: `const { Langfuse } = await import('@langfuse/langfuse-js');` to `const { Langfuse } = await import('langfuse');`",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 1
          },
          {
            "id": 2,
            "title": "Update .env.example with Langfuse Configuration",
            "description": "Add Langfuse environment variable template to .env.example file for user guidance",
            "details": "Add Langfuse configuration section to .env.example with LANGFUSE_SECRET_KEY, LANGFUSE_PUBLIC_KEY, LANGFUSE_HOST, and LANGFUSE_DEBUG variables with appropriate comments and default values",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 1
          },
          {
            "id": 3,
            "title": "Test Langfuse Integration",
            "description": "Verify the corrected Langfuse implementation works correctly with graceful fallback when not configured",
            "details": "Test that the module loads without errors, isEnabled() correctly detects configuration, getClient() returns null gracefully when not configured, and no runtime errors occur. Test both configured and unconfigured scenarios.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 1
          },
          {
            "id": 4,
            "title": "Write Unit Tests for Langfuse Tracer",
            "description": "Create comprehensive unit tests covering environment variable loading, graceful degradation, and cloud/self-hosted configurations",
            "details": "Write unit tests to verify environment variable loading works correctly, validate graceful degradation when Langfuse credentials are missing, ensure no runtime errors occur when Langfuse is not configured, and test both cloud and self-hosted Langfuse configurations as specified in the task strategy.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Create Langfuse Tracer Module Core Infrastructure",
        "description": "Implement the singleton Langfuse tracer module with lazy initialization and async trace submission capabilities",
        "details": "Create src/observability/langfuse-tracer.js implementing singleton pattern using ES6 modules. Implement lazy initialization that only creates Langfuse client when credentials are present. Use the Langfuse SDK's built-in async methods (trace(), span()) for fire-and-forget submission. Include connection validation, retry logic with exponential backoff, and error boundaries to prevent tracer failures from affecting main application. Implement trace ID generation using crypto.randomUUID() for correlation.",
        "testStrategy": "Test singleton behavior across multiple imports, verify lazy initialization only occurs with valid credentials, mock Langfuse SDK to test error handling and retry logic, validate async submission doesn't block main thread using performance timers.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Implement BaseAIProvider Instrumentation Wrapper",
        "description": "Create non-invasive wrapper pattern to instrument generateText method in BaseAIProvider class with Langfuse tracing",
        "details": "Modify src/ai-providers/base-provider.js to add tracing hooks. Implement wrapper method that captures start time, wraps the original generateText call in try-catch-finally, records completion time and calculates latency. Extract model name, provider name, token usage from response. Use Langfuse's trace.generation() method to record LLM calls with input/output/metadata. Ensure original error handling and response structure remain unchanged. Add feature flag check before instrumentation.",
        "testStrategy": "Create integration tests with mock AI providers to verify tracing doesn't alter response structure, test error propagation remains intact, measure performance overhead (should be <5ms), validate traces are created with correct metadata structure.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Import Langfuse Dependencies",
            "description": "Add imports for langfuse-tracer functions (isEnabled, createTrace) and any config utilities needed for feature flags",
            "details": "Import required functions from src/observability/langfuse-tracer.js in base-provider.js. Verify import paths are correct and functions are available.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 3
          },
          {
            "id": 2,
            "title": "Add Instrumentation Initialization",
            "description": "Create _initializeInstrumentation() method called from BaseAIProvider constructor to set up tracing",
            "details": "Add private method that checks if Langfuse is enabled and prepares instrumentation. This method should be called during constructor initialization.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 3
          },
          {
            "id": 3,
            "title": "Implement Method Wrapping Logic",
            "description": "Store reference to original generateText method and replace with instrumented version",
            "details": "Implement the decorator pattern: store original method reference and replace this.generateText with instrumented wrapper. Ensure method signature remains identical.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 3
          },
          {
            "id": 4,
            "title": "Create Instrumented generateText Method",
            "description": "Build the wrapper method that creates Langfuse traces and calls original method",
            "details": "Create _instrumentedGenerateText that creates trace, calls original method in try-catch-finally, and uses trace.generation() to record LLM call details.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 3
          },
          {
            "id": 5,
            "title": "Add Timing and Metadata Capture",
            "description": "Implement performance monitoring and metadata extraction for traces",
            "details": "Capture start/end times, calculate latency, extract model name, provider name, input/output, and token usage. Use high-resolution timing for accuracy.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 3
          },
          {
            "id": 6,
            "title": "Implement Error Handling Preservation",
            "description": "Ensure exact error behavior is maintained while adding tracing",
            "details": "Preserve all original error types and messages. Catch and log Langfuse errors without propagating them. Ensure original operation succeeds even if tracing fails.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 3
          },
          {
            "id": 7,
            "title": "Add Feature Flag Integration",
            "description": "Make instrumentation toggleable based on Langfuse configuration",
            "details": "Use isEnabled() check to conditionally activate instrumentation. Ensure zero overhead when disabled. Test both enabled and disabled states.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 3
          },
          {
            "id": 8,
            "title": "Add Integration Tests",
            "description": "Verify functionality and performance of instrumentation wrapper",
            "details": "Create tests with mock AI providers to verify tracing doesn't alter responses, error propagation works, and performance overhead is minimal (<5ms).",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 3
          }
        ]
      },
      {
        "id": 4,
        "title": "Add Task Master Context Metadata Collection",
        "description": "Enhance traces with Task Master specific context including task IDs, commands, tags, and role information",
        "details": "Extend tracer to capture Task Master context from execution environment. Access current task ID from task-manager module, extract command name from process arguments or MCP context, retrieve current tag using getCurrentTag() function. Implement role detection (main/fallback/research) by analyzing the provider selection logic. Add this metadata to Langfuse traces using the metadata field. Create context extraction utilities that safely handle missing context without errors.",
        "testStrategy": "Test metadata extraction with various Task Master commands, verify correct task ID association for nested subtasks, validate tag context switching, ensure metadata collection handles null/undefined values gracefully.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create TaskMasterContextExtractor utility class",
            "description": "Implement safe context extraction utility for Task Master specific metadata including task ID, current tag, command name, and role information",
            "details": "Create src/observability/task-master-context-extractor.js with methods to safely extract context from various sources:\n- extractTaskId(): Try command args, git branch pattern (task-N), state files\n- extractCurrentTag(): Use existing getCurrentTag() utility\n- extractCommand(): Parse from process.argv or MCP tool name  \n- extractContext(): Main method that safely orchestrates all extractions\nReturn standardized context object with graceful error handling",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 4
          },
          {
            "id": 2,
            "title": "Enhance ai-services-unified.js with context collection",
            "description": "Modify ai-services-unified.js to collect Task Master context before provider calls and pass it through options parameter",
            "details": "Modify scripts/modules/ai-services-unified.js:\n- Import TaskMasterContextExtractor\n- In _unifiedServiceRunner(), extract Task Master context using available info (role, commandName, projectRoot)\n- Pass context through options.taskMasterContext to provider calls\n- Maintain backward compatibility and error handling",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 4
          },
          {
            "id": 3,
            "title": "Enhance base-provider.js instrumentation with Task Master metadata",
            "description": "Modify base provider instrumentation to include Task Master context in Langfuse trace metadata",
            "details": "Modify src/ai-providers/base-provider.js:\n- In _instrumentedGenerateText(), check for options.taskMasterContext\n- Add Task Master metadata to trace creation: taskId, tag, command, role\n- Ensure backward compatibility when context is not available\n- Maintain existing error handling and performance characteristics",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 4
          },
          {
            "id": 4,
            "title": "Test and validate Task Master context metadata collection",
            "description": "Comprehensive testing of metadata collection across various Task Master commands, tag contexts, and execution scenarios",
            "details": "Test the implementation across different scenarios:\n- CLI commands with task context (task-start, task-update, etc.)\n- MCP operations with various task IDs and nested subtasks  \n- Tag switching scenarios to verify current tag detection\n- Error handling with missing/null context values\n- Verify metadata appears correctly in Langfuse traces\n- Performance impact assessment",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 4
          }
        ]
      },
      {
        "id": 5,
        "title": "Integrate Cost Tracking and Calculation",
        "description": "Implement cost calculation for AI calls using existing pricing models and add cost metadata to Langfuse traces",
        "details": "Leverage existing _getCostForModel() function from base-provider.js to calculate costs. Extract input/output token counts from provider responses. Calculate cost in USD and add to trace metadata. Implement cost aggregation helpers that can sum costs by task, session, or time period. Add cost alerts threshold configuration option. Ensure cost calculation handles all 11+ providers including custom models.",
        "testStrategy": "Verify cost calculations match expected values for each provider/model combination, test edge cases like streaming responses with partial token counts, validate cost aggregation accuracy across multiple traces.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Core Cost Calculation Module",
            "description": "Extract cost calculation logic from logAiUsage() into reusable src/utils/cost-calculator.js module. Function: calculateAiCost(providerName, modelId, inputTokens, outputTokens). Returns: {inputCost, outputCost, totalCost, currency, metadata}. Handle edge cases: missing tokens, unknown models, custom providers.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 5
          },
          {
            "id": 2,
            "title": "Integrate Cost Metadata into Langfuse Traces",
            "description": "Modify BaseAIProvider._generateTextInstrumented() to add cost metadata to traces after successful generation. Use updateTraceMetadata() function. Ensure metadata format is consistent and queryable. Handle Langfuse errors gracefully without breaking AI calls.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 5
          },
          {
            "id": 3,
            "title": "Add Streaming Cost Support",
            "description": "Modify StreamTraceWrapper to calculate costs on completion. Ensure tokens are available when streaming finishes. Add cost metadata to streaming traces. Handle interrupted streams gracefully.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 5
          },
          {
            "id": 4,
            "title": "Create Cost Aggregation Helpers",
            "description": "Create src/utils/cost-aggregator.js with functions to query Langfuse traces by task/session/time. Implement getCostsByTask(), getCostsBySession(), getCostsByTimeRange(), getCurrentSessionCosts(). Sum cost metadata from multiple traces. Handle missing or incomplete cost data gracefully.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 5
          },
          {
            "id": 5,
            "title": "Implement Cost Alerting Configuration",
            "description": "Extend config.json schema with cost alerting options. Add default configuration in config-manager.js. Structure: costTracking: {enabled: true, alerts: {enabled: true, thresholds: {sessionLimit: 1.0, taskLimit: 0.5, dailyLimit: 5.0}}}. Follow existing configuration patterns.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 5
          },
          {
            "id": 6,
            "title": "Add Cost Threshold Monitoring",
            "description": "Create cost threshold checking function. Integrate with BaseAIProvider after cost calculation. Log appropriate warnings when thresholds exceeded. Track cumulative costs for alerting. Ensure minimal performance impact.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 5
          },
          {
            "id": 7,
            "title": "Handle Edge Cases and Testing",
            "description": "Handle custom models without pricing data, provider response format variations, Langfuse unavailability. Ensure zero performance impact when cost tracking disabled. Create comprehensive test suite: unit tests for cost calculation, integration tests for Langfuse metadata, performance tests, edge case tests.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 5
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement Streaming Response Tracing Support",
        "description": "Extend tracing capabilities to handle streamText() method with progressive token counting and latency measurement",
        "details": "Create streaming-aware wrapper for streamText() method. Implement token accumulator that counts tokens as they arrive using provider-specific tokenization. Track first token time (TTFT) and total streaming duration. Use Langfuse's span concept to represent the streaming session with updates. Handle stream interruptions and errors gracefully. Ensure final token count is accurate by parsing the complete response.",
        "testStrategy": "Test with mock streaming responses of various sizes, verify token counting accuracy during streaming, measure performance impact on stream processing, test error handling for interrupted streams.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create StreamTraceWrapper utility class",
            "description": "Implement core streaming wrapper that preserves original stream behavior while adding tracing capabilities",
            "details": "Create StreamTraceWrapper class with async iterator pattern that wraps AI SDK streams. Implement token accumulation, timing measurement (TTFT, total duration), and progressive Langfuse span updates. Ensure zero impact on original stream functionality with comprehensive error handling.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 6
          },
          {
            "id": 2,
            "title": "Implement TokenCounter utility class",
            "description": "Create provider-specific token counting with real-time estimation and final verification",
            "details": "Implement TokenCounter class with word-based estimation for real-time updates during streaming and provider-specific accurate tokenization for final counts. Support OpenAI, Anthropic, and other providers with fallback to word counting. Optimize for performance with <1ms overhead per chunk.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 6
          },
          {
            "id": 3,
            "title": "Extend BaseAIProvider instrumentation for streamText",
            "description": "Modify _initializeInstrumentation to wrap streamText method following Task 3 pattern",
            "details": "Extend _initializeInstrumentation() method in BaseAIProvider to add streamText wrapping alongside existing generateText instrumentation. Store original streamText reference and replace with _instrumentedStreamText. Maintain same feature flag checking and zero overhead when disabled. Ensure consistency with Task 3 implementation patterns.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 6
          },
          {
            "id": 4,
            "title": "Implement _instrumentedStreamText method",
            "description": "Create instrumented wrapper method that integrates StreamTraceWrapper with Langfuse tracing",
            "details": "Implement _instrumentedStreamText() method following exact pattern from _instrumentedGenerateText. Create Langfuse trace, handle original streamText call, return StreamTraceWrapper instance, and implement comprehensive error handling. Ensure defensive programming - never break original stream behavior even if tracing fails.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 6
          },
          {
            "id": 5,
            "title": "Add comprehensive error handling and stream preservation",
            "description": "Implement robust error handling that preserves original stream behavior in all scenarios",
            "details": "Add comprehensive error handling for stream interruptions, network failures, Langfuse API errors, and provider-side issues. Ensure original stream errors propagate unchanged, tracing failures never break streaming, and partial trace data is preserved when possible. Test with error injection scenarios.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 6
          },
          {
            "id": 6,
            "title": "Create comprehensive test suite and performance optimization",
            "description": "Implement testing strategy with mock streams and performance optimization",
            "details": "Create comprehensive test suite with mock streaming responses of various sizes, token counting accuracy verification, performance impact measurement, and stream interruption testing. Implement performance optimizations including batched Langfuse updates, memory management for long streams, and ensure <5ms overhead per chunk. Add integration tests with real AI providers.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 6
          }
        ]
      },
      {
        "id": 7,
        "title": "Add Object Generation Tracing with Schema Capture",
        "description": "Implement tracing for generateObject() method including schema information and validation metadata",
        "details": "Extend instrumentation to generateObject() calls. Capture the Zod schema definition and convert to JSON schema for trace metadata. Track object generation success/failure rates and validation errors. Include generated object size metrics. Add schema version tracking for debugging schema evolution. Implement safe schema serialization that handles circular references.",
        "testStrategy": "Test with various Zod schema complexities, verify schema serialization doesn't fail on complex types, validate object generation success tracking, ensure sensitive data in generated objects can be excluded.",
        "priority": "low",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Create Configuration Management Integration",
        "description": "Integrate Langfuse configuration with Task Master's config-manager.js for advanced settings and feature control",
        "details": "Extend config-manager.js to support observability configuration section. Implement settings for: enabled flag, sampling rate (0.0-1.0), prompt/response logging toggle, sensitive data redaction patterns, trace batching size. Create configuration validator with sensible defaults. Add CLI commands for enabling/disabling Langfuse integration. Ensure configuration changes take effect without restart.",
        "testStrategy": "Test configuration loading precedence (env vars > config file), verify sampling rate correctly filters traces, test prompt redaction with regex patterns, validate runtime configuration updates.",
        "priority": "low",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Extend Configuration Schema",
            "description": "Add new configuration options to config-manager.js DEFAULTS including samplingRate, promptResponseLogging, redactionPatterns, and batchSize",
            "details": "Update the DEFAULTS object in config-manager.js to include the new observability.langfuse configuration options: samplingRate (0.0-1.0), promptResponseLogging (boolean), redactionPatterns (array of regex), batchSize (integer). Ensure backward compatibility with existing configuration structure.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 8
          },
          {
            "id": 2,
            "title": "Add Configuration Validation",
            "description": "Implement validation functions for new Langfuse configuration options with proper error handling",
            "details": "Create validateLangfuseConfig() function that validates: samplingRate is between 0.0-1.0, redactionPatterns are valid regex, batchSize is positive integer, enabled/promptResponseLogging are booleans. Add clear error messages and fallback to defaults for invalid values.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 8
          },
          {
            "id": 3,
            "title": "Add Configuration Getters",
            "description": "Create getter functions for new Langfuse configuration values following existing patterns",
            "details": "Add getter functions: getLangfuseSamplingRate(), isLangfusePromptLoggingEnabled(), getLangfuseRedactionPatterns(), getLangfuseBatchSize(). Update getLangfuseConfig() to handle new environment variables with proper precedence (env > config > defaults). Follow existing getter patterns in config-manager.js.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 8
          },
          {
            "id": 4,
            "title": "Implement Runtime Configuration Updates",
            "description": "Add mechanism for configuration changes to take effect without restart",
            "details": "Create reloadLangfuseConfig() function in config-manager.js that forces config reload and notifies langfuse-tracer.js. Add updateConfiguration() function to langfuse-tracer.js that clears cached client and reloads configuration. Ensure thread-safe configuration updates and proper error handling.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 8
          },
          {
            "id": 5,
            "title": "Add CLI Commands",
            "description": "Implement CLI commands for Langfuse configuration management",
            "details": "Add 'langfuse' command group to commands.js with subcommands: enable, disable, config, setup. Follow existing command patterns from models commands. Implement handlers for each command that read/write configuration, validate settings, trigger runtime reloads, and provide user feedback. Include help text and error handling.",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 8
          },
          {
            "id": 7,
            "title": "Update Import Statements",
            "description": "Add imports for getLangfuseSamplingRate, getLangfuseRedactionPatterns, and getLangfuseBatchSize from config-manager.js",
            "details": "Update the import section of langfuse-tracer.js to include the new configuration getters that were implemented in subtasks 8.1-8.5",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 8
          },
          {
            "id": 8,
            "title": "Implement Langfuse Built-in Masking",
            "description": "Create masking function using Langfuse's native capabilities and integrate redaction patterns from configuration",
            "details": "Use Langfuse's built-in mask parameter instead of custom redaction. Create createMaskingFunction() that converts redactionPatterns into Langfuse-compatible masking function",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 8
          },
          {
            "id": 9,
            "title": "Add Sampling Logic",
            "description": "Implement probabilistic sampling in createTrace() with early return for efficiency",
            "details": "Add sampling check at beginning of createTrace() using getLangfuseSamplingRate(). Support samplingRate values: false (disabled), 0 (no traces), 1 (all traces), 0.5 (50% of traces)",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 8
          },
          {
            "id": 10,
            "title": "Add Simple Batching",
            "description": "Implement counter-based batching that respects batchSize configuration",
            "details": "Add activeTraceCount variable and check batchSize in createTrace(). Increment counter on successful trace creation. Simple approach for basic batching consideration",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 8
          },
          {
            "id": 11,
            "title": "Integration and Testing",
            "description": "Update client initialization with masking, verify all existing tests pass, and test new features",
            "details": "Integrate masking function into initializeLangfuseClient(). Run existing test suite to ensure no regressions. Test sampling, masking, and batching work with configuration options",
            "status": "done",
            "dependencies": [],
            "testStrategy": "",
            "parentTaskId": 8
          }
        ]
      },
      {
        "id": 9,
        "title": "Implement Trace Correlation and Debugging Utilities",
        "description": "Build utilities for correlating Langfuse traces with application logs and debugging specific AI interactions",
        "details": "Add trace ID injection into Task Master's logger output. Create debug command 'tm debug-trace <trace-id>' that fetches and displays trace details from Langfuse API. Implement trace search by task ID or command. Add performance profiling mode that captures detailed timing for each AI operation phase. Create trace export functionality for offline analysis.",
        "testStrategy": "Verify trace IDs appear in correlated log entries, test debug command with various trace IDs, validate search functionality returns correct traces, ensure export format is compatible with common analysis tools.",
        "priority": "low",
        "dependencies": [
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Add Performance Monitoring and Optimization Features",
        "description": "Implement advanced performance monitoring including sampling, batching, and metrics aggregation for high-volume scenarios",
        "details": "Implement adaptive sampling that increases rate for errors/slow requests. Create trace batching with configurable flush intervals (default 5s) and batch size (default 100). Add local metrics aggregation for latency percentiles (p50, p95, p99). Implement circuit breaker pattern for Langfuse submission failures. Add performance dashboard export format compatible with Grafana/Datadog. Create memory-efficient circular buffer for recent traces.",
        "testStrategy": "Load test with 1000+ concurrent AI calls to verify sampling effectiveness, test batch submission under various network conditions, validate metrics aggregation accuracy, ensure circuit breaker prevents cascade failures.",
        "priority": "low",
        "dependencies": [
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-20T05:29:44.844Z",
      "updated": "2025-06-21T22:02:00.349Z",
      "description": "Tasks for feat-langfuse-integration context"
    }
  }
}