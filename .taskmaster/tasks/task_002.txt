# Task ID: 2
# Title: Create Worktree Manager Module Core
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Implement the core Worktree Manager module at scripts/modules/utils/worktree-manager.js with basic create/remove functionality using Task Master's existing error patterns.
# Details:
Keep it simple - just wrap Git commands and use existing patterns. No custom error classes or complex abstractions.

# Test Strategy:
Basic unit tests with mocked git commands

# Subtasks:
## 1. Create basic worktree wrapper functions [pending]
### Dependencies: None
### Description: Implement createWorktree and removeWorktree functions that wrap git commands
### Details:
Create worktree-manager.js with two functions:
- createWorktree(taskId, branch) - runs git worktree add
- removeWorktree(worktreeId) - runs git worktree remove
- Use standard throw new Error() for any failures
- Path should be ./worktrees/task-{id}/

## 2. Add listWorktrees function [pending]
### Dependencies: 2.1
### Description: Implement function to list current worktrees
### Details:
Add listWorktrees() function that:
- Runs git worktree list --porcelain
- Parses the output into a simple array
- Returns structured data with path and branch info

## 3. Integrate with Task Master's logger [pending]
### Dependencies: 2.1, 2.2
### Description: Use existing logger utilities for info and warning messages
### Details:
Import Task Master's logger and use it for:
- Info messages when worktrees are created/removed
- Warning messages for non-critical issues
- Let Git errors bubble up with throw new Error()

